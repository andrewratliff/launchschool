#! /usr/bin/env ruby

require "io/console"
require "pg"
require "pry"

class CLI
  attr_reader :args, :expenses

  def initialize(args)
    @expenses = ExpenseData.new
    @args = args
  end

  def run
    case args.first
    when "list"
      expenses.list
    when "add"
      return if invalid_input?(3) { "You must provide an amount and memo." }

      expenses.add(args[1], args[2])
    when "search"
      return if invalid_input?(2) { "You must enter a search term." }

      expenses.search(args[1])
    when "delete"
      return if invalid_input?(2) { "You must enter a valid id to delete." }

      expenses.delete(args[1])
    when "clear"
      puts "This will remove all expenses. Are you sure? (y/n)"
      return unless STDIN.getch.downcase.start_with?("y")

      expenses.delete_all_expenses
    else
      help_message
    end
  end

  private

  def help_message
    puts <<~MSG
      An expense recording system

      Commands:

      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a match memo field
    MSG
  end

  def invalid_input?(args_size)
    if args.size < args_size
      puts yield
      true
    else
      false
    end
  end
end

class ExpenseData
  attr_reader :connection

  def initialize
    @connection = PG.connect(dbname: "expenses")
    setup_schema
  end

  def list
    expenses = connection.exec("SELECT * FROM expenses ORDER BY created_on;")
    return if no_results?(expenses) { "There are no expenses." }

    display_count(expenses)
    print(expenses)
  end

  def add(amount, memo)
    sql = "INSERT INTO expenses (amount, memo) VALUES ($1, $2);"
    connection.exec_params(sql, [amount, memo])
  end

  def search(term)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1;"
    expenses = connection.exec_params(sql, ["%#{term}%"])
    return if no_results?(expenses) { "No expenses matched your search." }

    display_count(expenses)
    print(expenses)
  end

  def delete(id)
    sql = "SELECT * FROM expenses WHERE id = $1;"
    expenses = connection.exec_params(sql, [id])
    return if no_results?(expenses) { "There is no expense with the id '#{id}'." }

    sql = "DELETE FROM expenses WHERE id = $1;"
    connection.exec_params(sql, [id])
    puts "The following expense has been deleted:"
    print(expenses)
  end

  def delete_all_expenses
    connection.exec("DELETE FROM expenses;")
    puts "All expenses have been deleted."
  end

  private

  def setup_schema
    sql = <<~SQL
      SELECT COUNT(*) FROM information_schema.tables
      WHERE table_schema = 'public'
      AND table_name = 'expenses';
    SQL

    if connection.exec(sql)[0]["count"] == "0"
      sql = File.read("schema.sql")
      connection.exec(sql)
    end
  end

  def display_count(expenses)
    count = expenses.ntuples

    puts "There #{count == 1 ? 'is' : 'are'} #{count} expense#{'s' if count != 1}."
  end

  def print(expenses)
    expenses.each do |tuple|
      columns = [tuple["id"].rjust(3),
                 tuple["created_on"].rjust(10),
                 tuple["amount"].rjust(12),
                 tuple["memo"]]

      puts columns.join(" | ")
    end

    total = expenses.sum { |expense| expense["amount"].to_f }

    puts "-" * 50
    puts "Total #{sprintf('%.2f', total).rjust(25)}"
  end

  def no_results?(results)
    if results.values.empty?
      puts yield
      true
    else
      false
    end
  end
end

CLI.new(ARGV).run
